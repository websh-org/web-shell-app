{"version":3,"sources":["node_modules/@websh/remote-slave-port/remote-slave-port.mjs","web-shell-app.mjs"],"names":["RemoteSlavePort","constructor","id","_port","_manifest","_commands","_handlers","_receive","cmd","args","rsvp","throw","command","res","call","result","transfer","concat","postMessage","re","error","console","log","message","String","data","_connect","ev","source","window","parent","port","manifest","removeEventListener","onmessage","addEventListener","m","on","fn","push","commands","cmds","i","trigger","event","WebShellApp","bind","document","e","lastActiveElement","target","activeElement","body","requestIdleCallback","focus"],"mappings":";AAA6B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAAtB,MAAMA,EACXC,YAAYC,GACLC,KAAAA,MAAQ,KACRC,KAAAA,UAAY,GACZC,KAAAA,UAAY,GACZC,KAAAA,UAAY,GAEXC,MAAAA,EAAW,OAASC,IAAAA,EAAKC,KAAAA,EAAMC,KAAAA,MAC/B,IAIE,GAHCF,GACEG,KAAAA,MAAM,0BAER,KAAKN,UAAUG,GAElB,YADIE,GAAM,KAAKC,MAAM,8BAA8B,CAACC,QAAQJ,KAGxDK,MAAAA,QAAY,KAAKR,UAAUG,GAAKM,KAAK,KAAKL,IACzCM,EAAQC,GAAY,GAAGC,OAAOJ,GAChCV,KAAAA,MAAMe,YAAY,CAAEH,OAAAA,EAAQI,GAAIT,GAAQM,GAC7C,MAAOI,GACPC,QAAQC,IAAI,YAAYF,GACnBjB,KAAAA,MAAMe,YAAY,CAAEE,MAAOA,EAAMA,OAAS,iBAAkBG,QAASH,EAAMG,SAAWC,OAAOJ,GAAQK,KAAKL,EAAMK,MAAQ,GAAIN,GAAIT,MAUnIgB,EAAYC,IACZA,EAAGC,SAAWC,OAAOC,QACpBH,EAAGF,MAASE,EAAGF,KAAKM,MAAyB,aAAhBJ,EAAGF,KAAKvB,KACrCC,KAAAA,MAAQwB,EAAGF,KAAKM,KAChB5B,KAAAA,MAAMe,YAAY,CAAGhB,CAAAA,GAAK,YAAa8B,SAAU,KAAK5B,YAC3DyB,OAAOI,oBAAoB,UAAWP,GACjCvB,KAAAA,MAAM+B,UAAYP,CAAAA,IACrBpB,EAASoB,EAAGF,UAIhBI,OAAOM,iBAAiB,UAAWT,GAGrCM,SAASI,GAEA,OADFhC,KAAAA,UAAYgC,EACV,KAGTC,GAAGV,EAAIW,GAGE,OAFFhC,KAAAA,UAAUqB,GAAM,KAAKrB,UAAUqB,IAAO,GACtCrB,KAAAA,UAAUqB,GAAIY,KAAKD,GACjB,KAGT1B,QAAQJ,EAAK8B,GAEJ,OADFjC,KAAAA,UAAUG,GAAO8B,EACf,KAETE,SAASC,GACF,IAAA,IAAIvC,KAAMuC,EAAM,KAAK7B,QAAQ6B,EAAKA,EAAKC,IAI9CC,QAAQC,EAAOnB,EAAO,IAEb,OADPM,KAAKb,YAAY,CAAE0B,MAAAA,EAAOnB,KAAAA,IACnB,KAGTd,MAAMS,EAAOK,EAAO,IACZ,KAAA,CAAEL,MAAAA,EAAOK,KAAAA,IAvEU,QAAA,gBAAA;;ACkB7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,SAAA,QAAA,iBAAA,EAlBA,IAAA,EAAA,QAAA,4BACO,MAAMoB,EAAc,IAAI7C,EAAJ,gBAAoB,eAiB/C,QAAA,YAAA,EAhBO,MAAMgC,EAAWa,EAAYb,SAASc,KAAKD,GAgBlD,QAAA,SAAA,EAfO,MAAMjC,EAAUiC,EAAYjC,QAAQkC,KAAKD,GAehD,QAAA,QAAA,EARAA,EAAYjC,QAAQ,aAAa,KAAI,GACrCiC,EAAYjC,QAAQ,YAAY,KAAI,GAOpCiB,OAAOM,iBAAiB,OAAQ,KAC9BY,SAASZ,iBAAiB,QAASa,IACjCH,EAAYI,kBAAoBD,EAAEE,SAClC,GACFrB,OAAOM,iBAAiB,QAASa,IAC3BH,EAAYI,mBAAqBF,SAASI,gBAAkBJ,SAASK,MACvEC,oBAAoB,IAAIR,EAAYI,kBAAkBK","file":"web-shell-app.js","sourceRoot":"..","sourcesContent":["export class RemoteSlavePort {\n  constructor(id) {\n    this._port = null;\n    this._manifest = {};\n    this._commands = {};\n    this._handlers = {};\n\n    const _receive = async ({ cmd, args, rsvp }) => {\n      try {\n        if (!cmd) {\n          this.throw(\"slave-specify-command\");\n        }\n        if (!this._commands[cmd]) {\n          if (rsvp) this.throw(\"slave-command-not-supported\",{command:cmd});\n          return;\n        } \n        const res = await this._commands[cmd].call(this,args);\n        const [result, transfer] = [].concat(res);\n        this._port.postMessage({ result, re: rsvp }, transfer)\n      } catch (error) {\n        console.log(\"app error\",error)\n        this._port.postMessage({ error: error.error || \"command-failed\", message: error.message || String(error), data:error.data || {}, re: rsvp })\n      }\n    }\n\n    const _trigger = async (ev, data) => {\n      for (var h in this._handlers[ev]) {\n        this._handlers[ev][h](data);\n      }\n    }\n\n    const _connect = (ev) => {\n      if (ev.source !== window.parent) return;\n      if (!ev.data || !ev.data.port || !ev.data[id] === 'connect') return;\n      this._port = ev.data.port;\n      this._port.postMessage({ [id]: 'connected', manifest: this._manifest })\n      window.removeEventListener('message', _connect);\n      this._port.onmessage = ev => {\n        _receive(ev.data);\n      }\n    }\n\n    window.addEventListener('message', _connect);\n  }\n\n  manifest(m) {\n    this._manifest = m;\n    return this;\n  }\n\n  on(ev, fn) {\n    this._handlers[ev] = this._handlers[ev] || [];\n    this._handlers[ev].push(fn);\n    return this;\n  }\n\n  command(cmd, fn) {\n    this._commands[cmd] = fn;\n    return this;\n  }\n  commands(cmds) {\n    for (var id in cmds) this.command(cmds,cmds[i])\n    return;\n  }\n\n  trigger(event, data = {}) {\n    port.postMessage({ event, data });\n    return this;\n  }\n\n  throw(error, data = {}) {\n    throw { error, data }\n  }\n}\n","import { RemoteSlavePort } from \"@websh/remote-slave-port\";\nexport const WebShellApp = new RemoteSlavePort('SOUTH-TOOTH');\nexport const manifest = WebShellApp.manifest.bind(WebShellApp);\nexport const command = WebShellApp.command.bind(WebShellApp);\n\n\n/**\n * Apps can override these\n */\n\nWebShellApp.command('proc-close',()=>true);\nWebShellApp.command('proc-init',()=>true);\n\n/**\n * Autofocus - so we can switch between windows and keep the correct focus\n * TODO: Add opt-out option for this, which means that it should run when the\n * remote slave port is first connected.\n */\nwindow.addEventListener(\"load\", ()=> {\n  document.addEventListener('focus', e=>{\n    WebShellApp.lastActiveElement = e.target;\n  },true)\n  window.addEventListener('focus', e=>{\n    if (WebShellApp.lastActiveElement && document.activeElement === document.body) {\n      requestIdleCallback(()=>WebShellApp.lastActiveElement.focus())\n    }\n  }) \n})\n"]}